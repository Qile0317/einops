[{"path":[]},{"path":"https://qile0317.github.io/einops/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://qile0317.github.io/einops/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://qile0317.github.io/einops/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting qile.yang [] berkeley.edu. complaints reviewed investigated result response deemed necessary appropriate circumstances. leader(s) obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://qile0317.github.io/einops/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4","code":""},{"path":"https://qile0317.github.io/einops/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to APackOfTheClones Development","title":"Contributing to APackOfTheClones Development","text":"goal guide help get contributing APackOfTheClones quickly possible. guide divided two main pieces: Filing bug report issue. Suggesting change via pull request. Please note APackOfTheClones released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://qile0317.github.io/einops/dev/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug Reports","title":"Contributing to APackOfTheClones Development","text":"filing bug report via github issues, important thing include minimal reproducible example possible, problem can verified quickly, figure fix . three things need include make example reproducible: required packages, data, code. Packages loaded top script, ’s easy see ones example needs. easiest way include data use dput() generate R code recreate . example, recreate mtcars dataset R, ’d perform following steps: Run dput(mtcars) R Copy output reproducible script, type mtcars <- paste. Spend little bit time ensuring code easy others read: make sure ’ve used spaces variable names concise, informative use comments indicate problem lies best remove everything related problem. shorter code , easier understand. can check actually made reproducible example starting fresh R session pasting script . (Unless ’ve specifically asked , please don’t include output sessionInfo(). Although feel issue sure related versioning, go ahead.)","code":""},{"path":"https://qile0317.github.io/einops/dev/CONTRIBUTING.html","id":"pure-feature-requests","dir":"","previous_headings":"","what":"Pure Feature Requests","title":"Contributing to APackOfTheClones Development","text":"Use github issues file pure enhancements/feature requests, describe much detail possible functionality/optimizations made functions, potentially pseudocode actual code implementation. Additionally motivate positive contribution package.","code":""},{"path":"https://qile0317.github.io/einops/dev/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing to APackOfTheClones Development","text":"contribute change, follow steps: Create branch git make changes. Push branch github issue pull request (PR). Discuss pull request. Iterate either PR accepted decided ’s good fit. steps described detail . might feel overwhelming first time get set , gets easier practice. get stuck point, please reach help contributors. ’re familiar git github, please start reading http://r-pkgs..co.nz/git.html Pull requests evaluated seven point checklist: Motivation. pull request clearly concisely motivate need change. Also include motivation NEWS new release APackOfTheClones comes ’s easy users see ’s changed. Add item top file use markdown formatting. news item end (@yourGithubUsername, #the_issue_number). related changes. submit pull request, please check make sure haven’t accidentally included unrelated changes. make harder see exactly ’s changed, evaluate unexpected side effects. PR corresponds git branch, expect submit multiple changes make sure create multiple branches. multiple changes depend , start first one don’t submit others first one processed. Use coding style package. Maintaining consistent style across whole code base makes much easier jump code. ’re modifying existing code, separate pull request change style greatly appreciated. general, breaking change externally exported function, ideally avoided. ’re adding new parameters new function, ’ll also need document roxygen. Make sure re-run devtools::document() code submitting. fixing bug adding new feature non-graphical function, please add testthat unit test. fixing bug visual output, please add visual test expect_doppelganger(), try much possible reduce svg snapshot size minimizing number individual polygons displayed. ’re adding new graphical feature, please add short example appropriate function. seems like lot work don’t worry pull request isn’t perfect. pull request (“PR”) process, require review approval merging. Note guide modified version ggplot2’s github contributing.md","code":""},{"path":"https://qile0317.github.io/einops/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Qile Yang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"welcome-to-einops-land","dir":"Articles","previous_headings":"","what":"Welcome to einops-land!","title":"basics","text":"don’t write write comprehensible code Currently, einops supports base::array, extends . future, tensor types supported torch::torch_tensor’s.","code":"y <- aperm(x, c(1, 3, 4, 2)) y <- rearrange(x, \"b c h w -> b h w c\")"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"whats-in-this-vignette","dir":"Articles","previous_headings":"","what":"What’s in this vignette?","title":"basics","text":"fundamentals: reordering, composition decomposition axes operations: rearrange, reduce, repeat much can single operation!","code":"library(einops) #>  #> Attaching package: 'einops' #> The following object is masked from 'package:base': #>  #>     repeat"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"load-a-batch-of-images-to-play-with","dir":"Articles","previous_headings":"","what":"Load a batch of images to play with","title":"basics","text":"einops example data, image_tensor object - just base::array class attribute c(\"image_tensor\", \"array\"). data consists six 96x96 images 3 color channels. main difference base::array’s print method default show image using imager. also set option einops_row_major TRUE. global option package uses native R arrays stored column-major order, also affects indexing behaviour completely different compared python’s many row-major tensors. Using make examples much intuitive, images indexed batch, height, width, color channels, just like many deep learning frameworks. option false default preserve original R behavior, can overridden anytime setting .row_major argument.","code":"options(einops_row_major = TRUE) ims <- get(data(\"einops_image\")) print(dim(ims)) #> [1]  6 96 96  3 # display the first image (whole 4d tensor can't be rendered) ims[1, , , ] # second image in a batch ims[2, , , ] # rearrange, as the name suggests, rearranges elements # below we swapped height and width. # In other words, transposed first two axes (dimensions) rearrange(ims[1, , , ], \"h w c -> w h c\") # we could use more verbose names for axes, and result is the same: rearrange(ims[1, , , ], \"height width color -> width height color\") # when you operate on same set of axes many times, # you usually come up with short names. # That's what we do throughout this vignette - we'll use b (for batch), h, w, and c"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"composition-of-axes","dir":"Articles","previous_headings":"","what":"Composition of axes","title":"basics","text":"Transposition common useful, let’s move capabilities provided einops.","code":"# einops allows seamlessly composing batch and height to a new height dimension # We just rendered all images by collapsing to 3d tensor! rearrange(ims, \"b h w c -> (b h) w c\") # or compose a new dimension of batch and width rearrange(ims, \"b h w c -> h (b w) c\") # resulting dimensions are computed very simply # length of newly composed axis is a product of components # [6, 96, 96, 3] -> [96, (6 * 96), 3] dim(rearrange(ims, \"b h w c -> h (b w) c\")) #> [1]  96 576   3 # we can compose more than two axes. # let's flatten 4d array into 1d, resulting array has as many elements as the original dim(rearrange(ims, \"b h w c -> (b h w c)\")) #> [1] 165888"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"decomposition-of-axis","dir":"Articles","previous_headings":"","what":"Decomposition of axis","title":"basics","text":"","code":"# decomposition is the inverse process - represent an axis as a combination of new axes # several decompositions possible, so b1=2 is to decompose 6 to b1=2 and b2=3 dim(rearrange(ims, \"(b1 b2) h w c -> b1 b2 h w c \", b1 = 2)) #> [1]  2  3 96 96  3 # finally, combine composition and decomposition: rearrange(ims, \"(b1 b2) h w c -> (b1 h) (b2 w) c \", b1 = 2) # slightly different composition: b1 is merged with width, b2 with height # ... so letters are ordered by w then by h rearrange(ims, \"(b1 b2) h w c -> (b2 h) (b1 w) c \", b1 = 2) # move part of width dimension to height. # we should call this width-to-height as image width shrunk by 2 and height doubled. # but all pixels are the same! # Can you write reverse operation (height-to-width)? rearrange(ims, \"b h (w w2) c -> (h w2) (b w) c\", w2 = 2)"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"order-of-axes-matters","dir":"Articles","previous_headings":"","what":"Order of axes matters","title":"basics","text":"","code":"# compare with the next example rearrange(ims, \"b h w c -> h (b w) c\") # order of axes in composition is different # rule is just as for digits in the number: leftmost digit is the most significant, # while neighboring numbers differ in the rightmost axis.  # you can also think of this as lexicographic sort rearrange(ims, \"b h w c -> h (w b) c\") # what if b1 and b2 are reordered before composing to width? rearrange(ims, \"(b1 b2) h w c -> h (b1 b2 w) c \", b1 = 2)  # produces 'einops' rearrange(ims, \"(b1 b2) h w c -> h (b2 b1 w) c \", b1 = 2)  # produces 'eoipns'"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"meet-einops-reduce","dir":"Articles","previous_headings":"","what":"Meet einops.reduce","title":"basics","text":"einops-land don’t need guess happened axis present output — guessed — axis reduced.","code":"apply(x, -ncol(x), mean) # average over batch reduce(ims, \"b h w c -> h w c\", \"mean\") # the previous is identical to familiar: as_image_tensor(apply(ims, c(2, 3, 4), mean)) # but is so much more readable # Example of reducing of several axes # besides mean, there are also min, max, sum, prod reduce(ims, \"b h w c -> h w\", \"min\") # this is mean-pooling with 2x2 kernel # image is split into 2x2 patches, each patch is averaged reduce(ims, \"b (h h2) (w w2) c -> h (b w) c\", \"mean\", h2 = 2, w2 = 2) # max-pooling is similar # result is not as smooth as for mean-pooling reduce(ims, \"b (h h2) (w w2) c -> h (b w) c\", \"max\", h2 = 2, w2 = 2) # yet another example. Can you compute the resulting shape? reduce(ims, \"(b1 b2) h w c -> (b2 h) (b1 w)\", \"mean\", b1 = 2)"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"stack-and-concatenate","dir":"Articles","previous_headings":"","what":"Stack and concatenate","title":"basics","text":"","code":"# rearrange can also take care of lists of arrays with the same shape x <- lapply(1:6, function(i) ims[i, , , ]) cat(\"list with\", length(x), \"tensors of shape\", paste(dim(x[[1]]), collapse=\" \")) #> list with 6 tensors of shape 96 96 3 # that's how we can stack inputs # \"list axis\" becomes first (\"b\" in this case), and we left it there dim(rearrange(x, \"b h w c -> b h w c\")) #> [1]  6 96 96  3 # but new axis can appear in the other place: dim(rearrange(x, \"b h w c -> h w c b\")) #> [1] 96 96  3  6 # that's equivalent to array stacking, but written more explicitly all(rearrange(x, \"b h w c -> h w c b\") ==     aperm(array(unlist(x), dim = c(dim(x[[1]]), length(x))), 1:4) ) #> [1] TRUE # ... or we can concatenate along axes dim(rearrange(x, \"b h w c -> h (b w) c\")) #> [1]  96 576   3 # which is equivalent to concatenation all(rearrange(x, \"b h w c -> h (b w) c\") ==     abind::abind(x, along = 2)) #> [1] TRUE"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"addition-or-removal-of-axes","dir":"Articles","previous_headings":"","what":"Addition or removal of axes","title":"basics","text":"can write 1 create new axis length 1. Similarly can remove axis. also synonym () can use. ’s composition zero axes also unit length.","code":"x <- rearrange(ims, \"b h w c -> b 1 h w 1 c\")  # functionality of array expansion print(dim(x)) #> [1]  6  1 96 96  1  3 print(dim(rearrange(x, \"b 1 h w 1 c -> b h w c\")))  # functionality of array squeeze #> [1]  6 96 96  3 # compute max in each image individually, then show a difference x <- reduce(ims, \"b h w c -> b () () c\", \"max\") x <- `repeat`(x, \"b 1 1 c -> b 96 96 c\") - ims # we will learn about this in a sec rearrange(x, \"b h w c -> h (b w) c\")"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"repeating-elements","dir":"Articles","previous_headings":"","what":"Repeating elements","title":"basics","text":"Third operation introduce repeat, can either called einops.repeat tick enclosed repeat.    Note: repeat operation covers functionality identical base::array abind replication actually .","code":"# repeat along a new axis. New axis can be placed anywhere dim(einops.repeat(ims[1, , , ], \"h w c -> h new_axis w c\", new_axis = 5)) #> [1] 96  5 96  3 # shortcut dim(`repeat`(ims[1, , , ], \"h w c -> h 5 w c\")) #> [1] 96  5 96  3 # repeat along w (existing axis) `repeat`(ims[1, , , ], \"h w c -> h (repeated w) c\", repeated = 3) # repeat along two existing axes `repeat`(ims[1, , , ], \"h w c -> (2 h) (2 w) c\") # order of axes matters as usual - you can repeat each element (pixel) 3 times # by changing order in parenthesis `repeat`(ims[1, , , ], \"h w c -> h (w repeated) c\", repeated = 3)"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"reduce-repeat","dir":"Articles","previous_headings":"","what":"Reduce ⇆ repeat","title":"basics","text":"reduce repeat like opposite : first one reduces amount elements, second one increases. following example image repeated first, reduce new axis get back original tensor. Notice operation patterns “reverse” ","code":"repeated <- `repeat`(ims, \"b h w c -> b h new_axis w c\", new_axis = 2) reduced <- reduce(repeated, \"b h new_axis w c -> b h w c\", \"min\") all(ims == reduced) #> [1] TRUE"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"fancy-examples-in-random-order","dir":"Articles","previous_headings":"","what":"Fancy examples in random order","title":"basics","text":"(.k.. mad designer gallery)","code":"# interweaving pixels of different pictures # all letters are observable rearrange(ims, \"(b1 b2) h w c -> (h b1) (w b2) c \", b1 = 2) # interweaving along vertical for couples of images rearrange(ims, \"(b1 b2) h w c -> (h b1) (b2 w) c\", b1 = 2) # interweaving lines for couples of images # exercise: achieve the same result without einops in your favourite framework reduce(ims, \"(b1 b2) h w c -> h (b2 w) c\", \"max\", b1 = 2) # color can be also composed into dimension # ... while image is downsampled reduce(ims, \"b (h 2) (w 2) c -> (c h) (b w)\", \"mean\") # disproportionate resize reduce(ims, \"b (h 4) (w 3) c -> (h) (b w)\", \"mean\") # split each image in two halves, compute mean of the two reduce(ims, \"b (h1 h2) w c -> h2 (b w)\", \"mean\", h1 = 2) # split in small patches and transpose each patch rearrange(ims, \"b (h1 h2) (w1 w2) c -> (h1 w2) (b w1 h2) c\", h2 = 8, w2 = 8) # stop me someone! rearrange(ims, \"b (h1 h2 h3) (w1 w2 w3) c -> (h1 w2 h3) (b w1 h2 w3) c\", h2 = 2, w2 = 2, w3 = 2, h3 = 2) rearrange(ims, \"(b1 b2) (h1 h2) (w1 w2) c -> (h1 b1 h2) (w1 b2 w2) c\", h1 = 3, w1 = 3, b2 = 3) # patterns can be arbitrarily complicated reduce(ims, \"(b1 b2) (h1 h2 h3) (w1 w2 w3) c -> (h1 w1 h3) (b1 w2 h2 w3 b2) c\", \"mean\", h2 = 2, w1 = 2, w3 = 2, h3 = 2, b2 = 2) # pixelate: first downscale by averaging, then upscale back using the same pattern averaged <- reduce(ims, \"b (h h2) (w w2) c -> b h w c\", \"mean\", h2 = 6, w2 = 8) `repeat`(averaged, \"b h w c -> (h h2) (b w w2) c\", h2 = 6, w2 = 8) rearrange(ims, \"b h w c -> w (b h) c\") # let's bring color dimension as part of horizontal axis # at the same time horizontal axis is downsampled by 2x reduce(ims, \"b (h h2) (w w2) c -> (h w2) (b w c)\", \"mean\", h2 = 3, w2 = 3)"},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"basics","text":"rearrange doesn’t change number elements covers different R functions (like aperm, array, etc.) reduce combines reordering syntax reductions (mean, min, max, sum, prod, others) einops.repeat additionally covers repeating tiling composition decomposition axes corner stone, can used together","code":""},{"path":"https://qile0317.github.io/einops/dev/articles/basics.html","id":"bonus","dir":"Articles","previous_headings":"","what":"Bonus","title":"basics","text":"function einop() shorthand operations single function. See docs info.","code":""},{"path":"https://qile0317.github.io/einops/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Qile Yang. Maintainer, author, copyright holder.","code":""},{"path":"https://qile0317.github.io/einops/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yang, Q., (2025). Einops R. UC Berkeley. https://qile0317.github.io/einops/ Rogozhnikov, ., (2022). Einops: Clear Reliable Tensor Manipulations Einstein-like Notation. International Conference Learning Representations. https://openreview.net/forum?id=oapKSVM2bcj","code":"@Misc{,   title = {Einops for R},   author = {Qile Yang},   year = {2025},   url = {https://qile0317.github.io/einops/}, } @InProceedings{,   title = {Einops: Clear and Reliable Tensor Manipulations with Einstein-like Notation},   author = {Alex Rogozhnikov},   booktitle = {International Conference on Learning Representations},   year = {2022},   url = {https://openreview.net/forum?id=oapKSVM2bcj}, }"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"einops","dir":"","previous_headings":"","what":"Flexible, Powerful, and Readable Tensor Operations","title":"Flexible, Powerful, and Readable Tensor Operations","text":"Flexible powerful tensor operations readable reliable code.  Supports base R arrays (includes matrices, subtype base arrays), types frameworks torch future.","code":""},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible, Powerful, and Readable Tensor Operations","text":"einops available CRAN: latest semi-stable development version try:","code":"install.packages(\"einops\") devtools::install_github(\"Qile0317/einops@dev\")"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Flexible, Powerful, and Readable Tensor Operations","text":"einops minimalistic yet powerful API. Three core operations provided (einops tutorial shows cover stacking, reshape, transposition, squeeze/unsqueeze, repeat, tile, concatenate, view numerous reductions) MAJOR CAVEAT R’s base::arrays column-major, Python’s multidimensional arrays row-major. reflected respective indexing operations. fully replicate python expression using column-major array, three core functions .row_major optional argument replicates python row-major behaviour einops operations, ensuring output still column-major.","code":"library(einops) # rearrange elements according to the pattern output_tensor <- rearrange(input_tensor, 't b c -> b c t') # combine rearrangement and reduction output_tensor <- reduce(input_tensor, 'b c (h h2) (w w2) -> b h w c', 'mean', h2 = 2, w2 = 2) # copy along a new axis (note: repeat is surrounded by ticks. einops.repeat() works too) output_tensor <- `repeat`(input_tensor, 'h w -> h w c', c = 3)"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Flexible, Powerful, and Readable Tensor Operations","text":"vignette convenient way see einops action read using vignette(\"basics\", package = \"einops\") Kapil Sachdeva recorded small intro einops python version.","code":""},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"naming","dir":"","previous_headings":"","what":"Naming","title":"Flexible, Powerful, and Readable Tensor Operations","text":"einops stands Einstein-Inspired Notation operations (though “Einstein operations” attractive easier remember). Notation loosely inspired Einstein summation (particular numpy.einsum operation).","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"semantic-information-being-verbose-in-expectations","dir":"","previous_headings":"Why use einops notation","what":"Semantic information (being verbose in expectations)","title":"Flexible, Powerful, and Readable Tensor Operations","text":"two lines job context, second one provides information input output. words, einops focuses interface: input output, output computed. next operation looks similar: gives reader hint: independent batch images processing, rather sequence (video). Semantic information makes code easier read maintain.","code":"y <- x; dim(y) <- c(dim(y)[1], prod(dim(y)[-1])) y <- rearrange(x, 'b c h w -> b (c h w)') y <- rearrange(x, 'time c h w -> time (c h w)')"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"convenient-checks","dir":"","previous_headings":"Why use einops notation","what":"Convenient checks","title":"Flexible, Powerful, and Readable Tensor Operations","text":"Reconsider example: second line checks input four dimensions, can also specify particular dimensions. ’s opposed just writing comments shapes since comments don’t prevent mistakes, tested, without code review tend outdated","code":"y <- x; dim(y) <- c(dim(y)[1], prod(dim(y)[-1])) # x: (batch, 256, 19, 19) y <- rearrange(x, 'b c h w -> b (c h w)') y <- x; dim(y) <- c(dim(y)[1], prod(dim(y)[-1])) # x: (batch, 256, 19, 19) y = rearrange(x, 'b c h w -> b (c h w)', c = 256, h = 19, w = 19)"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"result-is-strictly-determined","dir":"","previous_headings":"Why use einops notation","what":"Result is strictly determined","title":"Flexible, Powerful, and Readable Tensor Operations","text":"least two ways define depth--space operation least four ways . one used underlying code? details ignored, since usually makes difference, can make big difference (e.g. use grouped convolutions next stage), ’d like specify code.","code":"# depth-to-space rearrange(x, 'b c (h h2) (w w2) -> b (c h2 w2) h w', h2 = 2, w2 = 2) rearrange(x, 'b c (h h2) (w w2) -> b (h2 w2 c) h w', h2 = 2, w2 = 2)"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"uniformity","dir":"","previous_headings":"Why use einops notation","what":"Uniformity","title":"Flexible, Powerful, and Readable Tensor Operations","text":"examples demonstrated don’t use separate operations 1d/2d/3d pooling, defined uniform way. Space--depth depth-space defined many frameworks width--height? go:","code":"reduce(x, 'b c (x dx) -> b c x', 'max', dx = 2) reduce(x, 'b c (x dx) (y dy) -> b c x y', 'max', dx = 2, dy = 3) reduce(x, 'b c (x dx) (y dy) (z dz) -> b c x y z', 'max', dx = 2, dy = 3, dz = 4) rearrange(x, 'b c h (w w2) -> b c (h w2) w', w2 = 2)"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"citing-einops-for-r","dir":"","previous_headings":"","what":"Citing Einops (for R)","title":"Flexible, Powerful, and Readable Tensor Operations","text":"using R implementation Einops research work, please cite original ICLR paper, addition package bibtex entries:","code":"@Misc{yang2025einops,     title = {Einops for R},     author = {Qile Yang},     year = {2025},     url = {https://qile0317.github.io/einops/}, }  @inproceedings{rogozhnikov2022einops,     title={Einops: Clear and Reliable Tensor Manipulations with Einstein-like Notation},     author={Alex Rogozhnikov},     booktitle={International Conference on Learning Representations},     year={2022},     url={https://openreview.net/forum?id=oapKSVM2bcj} }"},{"path":"https://qile0317.github.io/einops/dev/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Flexible, Powerful, and Readable Tensor Operations","text":"Devcontainer Dockerfile provided sourcecode, environment can used locally, server, within github codespaces. start devcontainers vs code, clone repo, click ‘Reopen Devcontainer’. building, installing, documentation can generated standard tidyverse devtools pipeline, using functions devtools::document() devtools::test() ’d like contribute, Github pull requests forked branches welcome mostly solo-project moment. major changes, please open issue first discuss like change. Please also make sure update tests appropriate.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AddOnlyOrderedMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","title":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","text":"function initializes new list-like object using specified keys values provided. resulting map preserves order insertion allow modification removal existing entries. AddOnlyOrderedMap can interacted exactly like regular list, possessing methods [, [[, [<-, [[<- behaviour, except NULL passed since removal permitted. keys() generic defined class, return list keys insertion order. has_key() generic also defined class, returning TRUE/FALSE key exists. Lastly, values() generic defined get values insertion order.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AddOnlyOrderedMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","text":"","code":"AddOnlyOrderedMap(   keys = NULL,   values = NULL,   key_validator = Negate(is.null),   val_validator = Negate(is.null) )"},{"path":"https://qile0317.github.io/einops/dev/reference/AddOnlyOrderedMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","text":"keys Optional list. vector keys initialize map . Can R object. assumed keys unique, otherwise behaviour undefined. scalar value. desired, wrap list(). values Optional list. iterable vector values corresponding keys. scalar value. desired, wrap list(). key_validator Optional function. function validates individual keys insertion, returning TRUE valid, FALSE otherwise. val_validator Optional function. function validates individual values insertion, returning TRUE valid, FALSE otherwise.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AddOnlyOrderedMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","text":"AddOnlyOrderedMap instance","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AddOnlyOrderedMap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an AddOnlyOrderedMap instance — AddOnlyOrderedMap","text":"average time complexity operations linear respect number insertion/query inputs, contrast R lists quadratic time complexity operations.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AxisNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an instance of an AxisNames class — AxisNames","title":"Construct an instance of an AxisNames class — AxisNames","text":"wrapper list(), elements may singular character(), ConstantAstNode() AstNode objects. (1 level nesting allowed, essentially another representation OneSidedAstNode(). Note using c() AxisNames object, object another AxisNames(), elements simply appended first object. nest (case GroupAstNode), must append list(AxisNames(...)) first object instead.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AxisNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an instance of an AxisNames class — AxisNames","text":"","code":"AxisNames(...)"},{"path":"https://qile0317.github.io/einops/dev/reference/AxisNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an instance of an AxisNames class — AxisNames","text":"... list elements arbitrary number elements","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/AxisNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an instance of an AxisNames class — AxisNames","text":"AxisNames object, list specific class","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"Singleton Backend Registry, managing all available backends. — BackendRegistry","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Contains global backend pool, ensuring backends loaded actually required.","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"BackendRegistry$get_backend() BackendRegistry$get_backend_from_type() BackendRegistry$register_backend() BackendRegistry$unregister_backend() BackendRegistry$add_backend_alias() BackendRegistry$clear_testing_backends() BackendRegistry$get_supported_types() BackendRegistry$get_dependencies() BackendRegistry$is_loadable()","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-get-backend-","dir":"Reference","previous_headings":"","what":"Method get_backend()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"detect return relevant backend input","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$get_backend(tensor)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor supported tensor-like class","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"singleton instance EinopsBackend() object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-get-backend-from-type-","dir":"Reference","previous_headings":"","what":"Method get_backend_from_type()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Get backend instance specific tensor type. backend loaded, instantiated.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$get_backend_from_type(tensor_class)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor_class string representing tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"instance backend class specified tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-register-backend-","dir":"Reference","previous_headings":"","what":"Method register_backend()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Register new backend singleton","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$register_backend(   tensor_type,   backend_class_thunk,   dependencies = character(0),   testing = FALSE,   aliases = character(0) )"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor_type string tensor type backend supports backend_class_thunk thunk()'ed EinopsBackend subclass generator dependencies character vector required package names testing logical flag indicating testing-backend aliases character vector aliases tensor type","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-unregister-backend-","dir":"Reference","previous_headings":"","what":"Method unregister_backend()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Unregister backend specific tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$unregister_backend(tensor_type)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor_type string tensor type","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-add-backend-alias-","dir":"Reference","previous_headings":"","what":"Method add_backend_alias()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Add alias backend type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$add_backend_alias(alias, tensor_type)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"alias string alias name tensor_type string canonical tensor type","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-clear-testing-backends-","dir":"Reference","previous_headings":"","what":"Method clear_testing_backends()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Clear testing-backends.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$clear_testing_backends()"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-get-supported-types-","dir":"Reference","previous_headings":"","what":"Method get_supported_types()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Get list registered backend types.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$get_supported_types()"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"character vector backend types.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-get-dependencies-","dir":"Reference","previous_headings":"","what":"Method get_dependencies()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"given tensor type, return required packages","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$get_dependencies(tensor_type)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor_type string tensor type","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"character vector required packages. Length 0 packages required.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"method-is-loadable-","dir":"Reference","previous_headings":"","what":"Method is_loadable()","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"Check tensor type truly loadable, .e., registered missing dependencies.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"","code":"BackendRegistry$is_loadable(tensor_type)"},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"tensor_type string tensor type","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/BackendRegistry.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Singleton Backend Registry, managing all available backends. — BackendRegistry","text":"TRUE tensor type loadable, FALSE otherwise.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/ConstantAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ConstantAstNode — ConstantAstNode","title":"Create a ConstantAstNode — ConstantAstNode","text":"Create ConstantAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/ConstantAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ConstantAstNode — ConstantAstNode","text":"","code":"ConstantAstNode(count, src = list())"},{"path":"https://qile0317.github.io/einops/dev/reference/ConstantAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ConstantAstNode — ConstantAstNode","text":"count Character string representing constant value src List start position","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/ConstantAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ConstantAstNode — ConstantAstNode","text":"ConstantAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsAst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an EinopsAst root node — EinopsAst","title":"Create an EinopsAst root node — EinopsAst","text":"Create EinopsAst root node","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsAst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an EinopsAst root node — EinopsAst","text":"","code":"EinopsAst(input_axes, output_axes, src)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsAst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an EinopsAst root node — EinopsAst","text":"input_axes List axis nodes input pattern, OneSidedAstNode() output_axes List axis nodes input pattern, OneSidedAstNode() src List start position covering full pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsAst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an EinopsAst root node — EinopsAst","text":"EinopsAst object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Backend Class for Einops Tensor Operations — EinopsBackend","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Abstract base class defines interface tensor operations across different frameworks. backend implementations must inherit class implement required methods.","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"EinopsBackend$new() EinopsBackend$print() EinopsBackend$repr() EinopsBackend$tensor_type() EinopsBackend$preprocess() EinopsBackend$create_tensor() EinopsBackend$as_array() EinopsBackend$arange() EinopsBackend$shape() EinopsBackend$reshape() EinopsBackend$transpose() EinopsBackend$reduce() EinopsBackend$stack_on_zeroth_dimension() EinopsBackend$add_axis() EinopsBackend$add_axes() EinopsBackend$tile() EinopsBackend$concat() EinopsBackend$is_float_type() EinopsBackend$layers() EinopsBackend$einsum()","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Initialize backend check required packages. assumed constructor fully load setup dependencies error otherwise.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$new()"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"new EinopsBackend instance.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"print method EinopsBackend instances","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$print(...)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"... arguments passed pprint()","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"object, invisibly","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-repr-","dir":"Reference","previous_headings":"","what":"Method repr()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Get string representation backend.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$repr()"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"character string describing backend.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-tensor-type-","dir":"Reference","previous_headings":"","what":"Method tensor_type()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Get type tensor backend supports. method overridden subclasses return specific tensor type (e.g., \"torch_tensor\", \"array\").","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$tensor_type()"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"string representing tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-preprocess-","dir":"Reference","previous_headings":"","what":"Method preprocess()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"relevant preprocessing tensor operations done . always called running backend operations tensor","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$preprocess(x)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input raw tensor-like object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"preprocessed version input, may may changed classes","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-create-tensor-","dir":"Reference","previous_headings":"","what":"Method create_tensor()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Create tensor specified type given values dimensions.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$create_tensor(values, dims, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"values vector values initialize tensor. dims numeric vector specifying dimensions tensor. ... Additional arguments specific backend implementations.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensor specified type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-as-array-","dir":"Reference","previous_headings":"","what":"Method as_array()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Convert tensor standard base::array()","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$as_array(x)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"standard array representation tensor.","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$arange(start, stop)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"start integer, inclusive stop integer, inclusive","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"sequence start stop","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-shape-","dir":"Reference","previous_headings":"","what":"Method shape()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Get shape tensor. Shape return tuple integers \"shape symbols\" (evaluate actual size).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$shape(x)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"numeric vector representing tensor shape.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-reshape-","dir":"Reference","previous_headings":"","what":"Method reshape()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Reshape tensor specified dimensions.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$reshape(x, shape)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. shape numeric vector specifying new shape.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"reshaped tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-transpose-","dir":"Reference","previous_headings":"","what":"Method transpose()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Transpose tensor along specified axes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$transpose(x, axes)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. axes numeric vector specifying new axis order.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"transposed tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-reduce-","dir":"Reference","previous_headings":"","what":"Method reduce()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Reduce tensor along specified axes using given operation.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$reduce(x, operation, axes)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. operation character string specifying reduction operation (e.g., \"sum\", \"mean\", \"max\", \"min\", \"prod\", \"\", \"\"), two argument function, first argument tensor modify, second argument integer list axes perform reduction . axes numeric vector specifying axes reduce .","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"reduced tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-stack-on-zeroth-dimension-","dir":"Reference","previous_headings":"","what":"Method stack_on_zeroth_dimension()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Stack multiple tensors along new zeroth dimension.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$stack_on_zeroth_dimension(tensors)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensors list tensors/arrays stack.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensor/array input tensors stacked along dimension 1.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-add-axis-","dir":"Reference","previous_headings":"","what":"Method add_axis()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Add new axis tensor specified position.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$add_axis(x, new_position)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. new_position position (1-based) insert new axis.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensor/array new axis added.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-add-axes-","dir":"Reference","previous_headings":"","what":"Method add_axes()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Add multiple axes tensor tile along specified axes. function adds new axes input tensor specified positions tiles tensor along axes according provided lengths.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$add_axes(x, n_axes, pos2len)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. n_axes total number axes addition. pos2len int->int r2r::hashmap() mapping positions lengths.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensor/array new axes added tiled specified.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-tile-","dir":"Reference","previous_headings":"","what":"Method tile()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Tile (repeat) tensor along axis according repeat counts. repeats vector length tensor's shape.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$tile(x, repeats)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array. repeats numeric vector specifying many times repeat along axis. Must length x.shape.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tiled tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-concat-","dir":"Reference","previous_headings":"","what":"Method concat()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Concatenate tensors along specified axis. Assumes identical devices, dtypes shapes except selected axis.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$concat(tensors, axis)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"tensors list tensors/arrays concatenate. axis axis along concatenate (1-based).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"concatenated tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-is-float-type-","dir":"Reference","previous_headings":"","what":"Method is_float_type()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Check tensor floating point data type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$is_float_type(x)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"x input tensor/array.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"logical value indicating tensor float type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-layers-","dir":"Reference","previous_headings":"","what":"Method layers()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Get neural network layers specific backend.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$layers()"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Backend-specific layer implementations.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"method-einsum-","dir":"Reference","previous_headings":"","what":"Method einsum()","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"Perform Einstein summation tensors.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"","code":"EinopsBackend$einsum(pattern, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"pattern character string specifying einsum pattern. ... Additional tensors operate .","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsBackend.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Base Backend Class for Einops Tensor Operations — EinopsBackend","text":"result einsum operation.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsExecutionPlan.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for an Execution Plan (CookedRecipe in the python sourcecode) — EinopsExecutionPlan","title":"Constructor for an Execution Plan (CookedRecipe in the python sourcecode) — EinopsExecutionPlan","text":"Constructor Execution Plan (CookedRecipe python sourcecode)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsExecutionPlan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for an Execution Plan (CookedRecipe in the python sourcecode) — EinopsExecutionPlan","text":"","code":"EinopsExecutionPlan(   init_shapes,   axes_reordering,   reduced_axes,   added_axes,   final_shapes,   n_axes_w_added )"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsExecutionPlan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for an Execution Plan (CookedRecipe in the python sourcecode) — EinopsExecutionPlan","text":"init_shapes integer vector specifying initial tensor shapes reshaping. Length 0 signifies nullness. axes_reordering integer vector specifying order transposing tensor axes. Length 0 signifies nullness. reduced_axes List integers specifying axes reduce operations. Length 0 signifies nullness. added_axes r2r::hashmap() mapping axis positions (int) lengths (int) axes added. final_shapes list integers specifying final tensor shapes reshaping. Length 0 signifies nullness. n_axes_w_added Integer specifying total number axes adding new axes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsExecutionPlan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for an Execution Plan (CookedRecipe in the python sourcecode) — EinopsExecutionPlan","text":"object class EinopsExecutionPlan, list containing execution plan transforming tensors according specified recipe.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsTokenSequence.html","id":null,"dir":"Reference","previous_headings":"","what":"EinopsTokenSequence constructor — EinopsTokenSequence","title":"EinopsTokenSequence constructor — EinopsTokenSequence","text":"Helper build token sequence (list tokens)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsTokenSequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EinopsTokenSequence constructor — EinopsTokenSequence","text":"","code":"EinopsTokenSequence(...)"},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsTokenSequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EinopsTokenSequence constructor — EinopsTokenSequence","text":"... tokens EinopsTokenSequences include","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EinopsTokenSequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EinopsTokenSequence constructor — EinopsTokenSequence","text":"list tokens","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EllipsisAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an EllipsisAstNode — EllipsisAstNode","title":"Create an EllipsisAstNode — EllipsisAstNode","text":"Create EllipsisAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EllipsisAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an EllipsisAstNode — EllipsisAstNode","text":"","code":"EllipsisAstNode(src)"},{"path":"https://qile0317.github.io/einops/dev/reference/EllipsisAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an EllipsisAstNode — EllipsisAstNode","text":"src List start position","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/EllipsisAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an EllipsisAstNode — EllipsisAstNode","text":"EllipsisAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/GroupAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GroupAstNode — GroupAstNode","title":"Create a GroupAstNode — GroupAstNode","text":"Create GroupAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/GroupAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GroupAstNode — GroupAstNode","text":"","code":"GroupAstNode(children, src = list())"},{"path":"https://qile0317.github.io/einops/dev/reference/GroupAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GroupAstNode — GroupAstNode","text":"children List axis nodes contained group, potentially empty src List start position","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/GroupAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GroupAstNode — GroupAstNode","text":"GroupAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/NamedAxisAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a NamedAxisAstNode — NamedAxisAstNode","title":"Create a NamedAxisAstNode — NamedAxisAstNode","text":"Create NamedAxisAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/NamedAxisAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a NamedAxisAstNode — NamedAxisAstNode","text":"","code":"NamedAxisAstNode(name, src = list())"},{"path":"https://qile0317.github.io/einops/dev/reference/NamedAxisAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a NamedAxisAstNode — NamedAxisAstNode","text":"name Character string, name axis src List start position","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/NamedAxisAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a NamedAxisAstNode — NamedAxisAstNode","text":"NamedAxisAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/OneSidedAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a OneSidedAstNode (wrapper for input/output axes lists) — OneSidedAstNode","title":"Create a OneSidedAstNode (wrapper for input/output axes lists) — OneSidedAstNode","text":"Create OneSidedAstNode (wrapper input/output axes lists)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/OneSidedAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a OneSidedAstNode (wrapper for input/output axes lists) — OneSidedAstNode","text":"","code":"OneSidedAstNode(...)"},{"path":"https://qile0317.github.io/einops/dev/reference/OneSidedAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a OneSidedAstNode (wrapper for input/output axes lists) — OneSidedAstNode","text":"... Axis nodes (single list axis nodes) already OneSidedAstNode, returned .","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/OneSidedAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a OneSidedAstNode (wrapper for input/output axes lists) — OneSidedAstNode","text":"OneSidedAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/TransformRecipe.html","id":null,"dir":"Reference","previous_headings":"","what":"TransformRecipe S3 constructor — TransformRecipe","title":"TransformRecipe S3 constructor — TransformRecipe","text":"Recipe describes actual computation pathway. Can applied tensor variable.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/TransformRecipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TransformRecipe S3 constructor — TransformRecipe","text":"","code":"TransformRecipe(   elementary_axes_lengths,   axis_name2elementary_axis,   input_composition_known_unknown,   axes_permutation,   first_reduced_axis,   added_axes,   output_composite_axes )"},{"path":"https://qile0317.github.io/einops/dev/reference/TransformRecipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TransformRecipe S3 constructor — TransformRecipe","text":"elementary_axes_lengths Integer vector. List sizes elementary axes appear input (left) expression. (computing unknown parts) shape first transposition. include ellipsis dimensions. axis_name2elementary_axis r2r::hashmap() Mapping name position. additional axes provided, set prev array. keys unclassed AxisNames() objects, values integer positions elementary axes. input_composition_known_unknown List list(known, unknown). known unknown integer vectors containing axis positions. unknown unknown integer vectors represent unordered set always sorted help testing. ascending order deterministic output. axes_permutation Integer vector. Permutation applied elementary axes, ellipsis absent. first_reduced_axis Integer length 1. First position reduced axes. Permutation puts reduced axes end, need know first position. added_axes r2r::hashmap(). Axis position -> axis index. positions elementary axes appear. output_composite_axes List integer vectors. Ids axes appear result. pointers elementary_axes_lengths, used infer result dimensions.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/TransformRecipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TransformRecipe S3 constructor — TransformRecipe","text":"object class 'TransformRecipe'.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/UnderscoreAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an UnderscoreAstNode — UnderscoreAstNode","title":"Create an UnderscoreAstNode — UnderscoreAstNode","text":"Create UnderscoreAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/UnderscoreAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an UnderscoreAstNode — UnderscoreAstNode","text":"","code":"UnderscoreAstNode(src = list())"},{"path":"https://qile0317.github.io/einops/dev/reference/UnderscoreAstNode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an UnderscoreAstNode — UnderscoreAstNode","text":"src List start position","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/UnderscoreAstNode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an UnderscoreAstNode — UnderscoreAstNode","text":"UnderscoreAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Merging — append","title":"Vector Merging — append","text":"Add elements vector.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Merging — append","text":"","code":"append(x, values, after = length(x), ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Merging — append","text":"x vector values appended . values included modified vector. subscript, values appended. ... Additional arguments passed methods.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Merging — append","text":"vector containing values x elements   values appended specified element x.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vector Merging — append","text":"Becker, R. ., Chambers, J. M. Wilks, . R. (1988)   New S Language.   Wadsworth & Brooks/Cole.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/append.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Merging — append","text":"","code":"append(1:5, 0:1, after = 3) #> [1] 1 2 3 0 1 4 5"},{"path":"https://qile0317.github.io/einops/dev/reference/apply_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a TransformRecipe to a Tensor — apply_recipe","title":"Apply a TransformRecipe to a Tensor — apply_recipe","text":"function applies TransformRecipe tensor, performing rearrangement reduction specified recipe. TODO docs parts compilation pipeline .","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/apply_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a TransformRecipe to a Tensor — apply_recipe","text":"","code":"apply_recipe(backend, recipe, tensor, reduction_type, axes_lengths)"},{"path":"https://qile0317.github.io/einops/dev/reference/apply_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a TransformRecipe to a Tensor — apply_recipe","text":"backend EinopsBackend() use tensor operations. recipe TransformRecipe() specifies transform tensor. tensor tensor transformed reduction_type character length 1 specifies type reduction apply. axes_lengths TODO check - think just integer vector?","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/apply_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a TransformRecipe to a Tensor — apply_recipe","text":"tensor transformed according recipe, type (possible) input tensor.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_axis_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an AstNode into an AxisNames() object — as_axis_names","title":"Convert an AstNode into an AxisNames() object — as_axis_names","text":"Convert AstNode AxisNames() object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_axis_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an AstNode into an AxisNames() object — as_axis_names","text":"","code":"as_axis_names(ast, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/as_axis_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an AstNode into an AxisNames() object — as_axis_names","text":"ast AstNode input ... args","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_axis_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an AstNode into an AxisNames() object — as_axis_names","text":"AxisNames() object axes order","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_axis_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an AstNode into an AxisNames() object — as_axis_names","text":"","code":"# get_axis_names(parse_onesided_ast(lex('a (b c 1) 2 d'))) # should output AxisNames( #   \"a\", AxisNames(\"b\", \"c\", ConstantAstNode(1)), ConstantAstNode(2), \"d\" # )"},{"path":"https://qile0317.github.io/einops/dev/reference/as_iterables.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a list of iterables (lists) — as_iterables","title":"Convert an object to a list of iterables (lists) — as_iterables","text":"function converts object list iterables, iterable list elements. function generic can extended different classes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_iterables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a list of iterables (lists) — as_iterables","text":"","code":"as_iterables(x, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/as_iterables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a list of iterables (lists) — as_iterables","text":"x input object converted ... additional arguments (used)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_iterables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a list of iterables (lists) — as_iterables","text":"list iterables, iterable list elements","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/as_iterables.html","id":"axisnames","dir":"Reference","previous_headings":"","what":"AxisNames","title":"Convert an object to a list of iterables (lists) — as_iterables","text":"method converts AxisNames object list iterables. element AxisNames processed extract name constant value. element ConstantAstNode count 1, converted empty list. Otherwise, wrapped list. element NamedAxisAstNode, name extracted. Regular AxisNames nested unclassed","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/create_execution_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct all actual parameters using shape. — create_execution_plan","title":"Reconstruct all actual parameters using shape. — create_execution_plan","text":"implements _reconstruct_from_shape_uncached python implementation einops. future, cached version may implemented.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/create_execution_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct all actual parameters using shape. — create_execution_plan","text":"","code":"create_execution_plan(recipe, shape, axes_dims)"},{"path":"https://qile0317.github.io/einops/dev/reference/create_execution_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct all actual parameters using shape. — create_execution_plan","text":"recipe populated TransformRecipe() object shape vector integers representing shape tensor. axes_dims named list axes names dimensions/lengths. May also empty list.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/create_execution_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct all actual parameters using shape. — create_execution_plan","text":"EinopsExecutionPlan object contains execution plan transforming tensors according specified recipe shape.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einop.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Einstein-style tensor operations — einop","title":"Perform Einstein-style tensor operations — einop","text":"unified interface rearranging, reducing, repeating tensor dimensions using Einstein notation-inspired expressions. directly adapted python einop package: https://github.com/cgarciae/einop einop() auto detects operation type based provided expression: rearrange() input dimensions present output reduce() input dimensions missing output einops.repeat() output contains dimensions input Note ongoing debates use function purely perspective code readability maintainability: https://github.com/arogozhnikov/einops/issues/84. Generally, argue descriptive names rearrange, reduce, repeat encourage good practices, others think semantically einop() actually makes clearer operation , opposed mandating use commonly used function names across many packages.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Einstein-style tensor operations — einop","text":"","code":"einop(   x,   expr,   reduction = NULL,   ...,   .row_major = getOption(\"einops_row_major\", FALSE) )"},{"path":"https://qile0317.github.io/einops/dev/reference/einop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Einstein-style tensor operations — einop","text":"x tensor: array, matrix, list arrays shape type expr string: reduction pattern reduction string specifying reduction operation (e.g., \"mean\", \"sum\", \"max\"). Required reduce operations, ignored rearrange repeat operations. ... either corresponding axes lengths single list . .row_major logical: whether use row-major order output tensor. TRUE, operation performed row-major order, output whatever order parent framework uses (e.g. column-major base::array()).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Einstein-style tensor operations — einop","text":"tensor dimensions transformed according expression","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Einstein-style tensor operations — einop","text":"","code":"if (requireNamespace(\"abind\", quietly = TRUE)) {  # load a 3d tensor representing an rgb image x <- get(data(\"einops_image\"))[1, , , ]  # Rearrange dimensions einop(x, \"h w c -> c h w\")  # Reduce dimensions einop(x, \"h w c -> h w\", \"mean\")  # Repeat dimensions einop(x[, , 1], \"h w -> h w c\", c = 3)  }"},{"path":"https://qile0317.github.io/einops/dev/reference/einops-package.html","id":null,"dir":"Reference","previous_headings":"","what":"einops: Flexible, Powerful, and Readable Tensor Operations — einops-package","title":"einops: Flexible, Powerful, and Readable Tensor Operations — einops-package","text":"Perform tensor operations using concise yet expressive syntax inspired 'Python' library name. Reshape, rearrange, combine multidimensional arrays scientific computing, machine learning, data analysis. Einops simplifies complex manipulations, making code maintainable intuitive.","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/reference/einops-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"einops: Flexible, Powerful, and Readable Tensor Operations — einops-package","text":"Maintainer: Qile Yang qile.yang@berkeley.edu (ORCID) [copyright holder]","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"operation includes functionality repeat, tile, broadcast functions.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"","code":"einops.repeat(x, expr, ..., .row_major = getOption(\"einops_row_major\", FALSE))  repeat x"},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"x tensor: array, matrix, list arrays shape type expr string: reduction pattern ... either corresponding axes lengths single list . .row_major logical: whether use row-major order output tensor. TRUE, operation performed row-major order, output whatever order parent framework uses (e.g. column-major base::array()).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"tensor type input, dimensions according output pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"composing axes, C-order enumeration used (consecutive elements different last axis). Find examples vignettes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"why-can-t-the-function-be-called-as-repeat-","dir":"Reference","previous_headings":"","what":"Why can't the function be called as repeat()?","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"repeat reserved keyword R acts (TRUE), way overridden. Hence, function can called einops.repeat() using backticks `repeat`().","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops.repeat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allows reordering elements and repeating them in arbitrary combinations. — einops.repeat","text":"","code":"if (requireNamespace(\"abind\", quietly = TRUE)) {  set.seed(42) # a grayscale image (of shape height x width) image <- array(rnorm(30 * 40), dim = c(30, 40))  # change it to RGB format by repeating in each channel output <- einops.repeat(image, 'h w -> h w c', c = 3) # Visualize the output as_image_tensor(output)  # repeat image 2 times along height (vertical axis) output <- einops.repeat(image, 'h w -> (r h) w', r = 2)  # repeat image 2 times along height and 3 times along width output <- einops.repeat(image, 'h w -> (h2 h) (w3 w)', h2 = 2, w3 = 3)  # convert each pixel to a small square 2x2, i.e. upsample an image by 2x output <- einops.repeat(image, 'h w -> (h h2) (w w2)', h2 = 2, w2 = 2)  # 'pixelate' an image first by downsampling by 2x, then upsampling downsampled <- reduce(image, '(h h2) (w w2) -> h w', 'mean', h2 = 2, w2 = 2) output <- einops.repeat(downsampled, 'h w -> (h h2) (w w2)', h2 = 2, w2 = 2) as_image_tensor(einops.repeat(output, 'h w -> h w 3'))  }"},{"path":"https://qile0317.github.io/einops/dev/reference/einops_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Example 4D Image Tensor for Einops — einops_image","title":"Example 4D Image Tensor for Einops — einops_image","text":"image_tensor() object super thin wrapper around 4D base::array(), representing image data format \"b h w c\" (batch, height, width, channels). actual image data 6 black letters differently colored backgrounds, spelling word \"einops\". printing object terminal automatically plot images. subset, use [ operator, used single index, return single image tensor.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example 4D Image Tensor for Einops — einops_image","text":"","code":"einops_image"},{"path":"https://qile0317.github.io/einops/dev/reference/einops_image.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example 4D Image Tensor for Einops — einops_image","text":"image_tensor() object 6 images, size 96 x 96 pixels, 3 color channels (RGB). images stored 4D array dimensions (6, 96, 96, 3).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/einops_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example 4D Image Tensor for Einops — einops_image","text":"","code":"data(\"einops_image\") for (i in seq_len(6)) print(einops_image[i, , , ])"},{"path":"https://qile0317.github.io/einops/dev/reference/expand_ellipsis.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand ellipses of an EinopsAst — expand_ellipsis","title":"Expand ellipses of an EinopsAst — expand_ellipsis","text":"Helper prepare_transformation_recipe(). function expands relevant ellipsis ast node -place sequence NamedAxisAstNode nodes, node name like \"...1\", \"...2\", etc. empty src list. Also validation ellipses syntax using ndim.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/expand_ellipsis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand ellipses of an EinopsAst — expand_ellipsis","text":"","code":"expand_ellipsis(einops_ast, ndim)"},{"path":"https://qile0317.github.io/einops/dev/reference/expand_ellipsis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand ellipses of an EinopsAst — expand_ellipsis","text":"einops_ast EinopsAst ndim integer. Number dimensions input tensor","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/expand_ellipsis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand ellipses of an EinopsAst — expand_ellipsis","text":"expanded EinopsAst ellipses expanded","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/find_top_level_arrow_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the arrow in a token sequence — find_top_level_arrow_index","title":"Find the arrow in a token sequence — find_top_level_arrow_index","text":"Find arrow token sequence","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/find_top_level_arrow_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the arrow in a token sequence — find_top_level_arrow_index","text":"","code":"find_top_level_arrow_index(tokens)"},{"path":"https://qile0317.github.io/einops/dev/reference/find_top_level_arrow_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the arrow in a token sequence — find_top_level_arrow_index","text":"tokens EinopsTokenSequence object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/find_top_level_arrow_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the arrow in a token sequence — find_top_level_arrow_index","text":"one-indexed Integer position arrow token","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function to detect and return backend — get_backend","title":"Main function to detect and return backend — get_backend","text":"Main function detect return backend","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function to detect and return backend — get_backend","text":"","code":"get_backend(tensor)"},{"path":"https://qile0317.github.io/einops/dev/reference/get_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function to detect and return backend — get_backend","text":"tensor supported tensor-like object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function to detect and return backend — get_backend","text":"instance EinopsBackend() class. Every returned object singleton, object returned tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_identifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a OneSidedAstNode object, get unique identifiers — get_identifiers","title":"Given a OneSidedAstNode object, get unique identifiers — get_identifiers","text":"get unordered list, representing set unique identifiers one side expression. Named nodes become character representing name, ConstantAstNode nodes just , aside 1 ignored. GroupAstNode nodes flattened, EllipsisAstNode nodes ignored.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_identifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a OneSidedAstNode object, get unique identifiers — get_identifiers","text":"","code":"get_identifiers(ast, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/get_identifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a OneSidedAstNode object, get unique identifiers — get_identifiers","text":"ast Abstract Syntax Tree (AST) einops expression positions ConstantAstNode objects output. REMOVE elements src list. ... additional arguments (used)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_identifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a OneSidedAstNode object, get unique identifiers — get_identifiers","text":"AxisNames() unique identifiers","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ordered_axis_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ordered axis names from a OneSidedAstNode, removing all nesting. — get_ordered_axis_names","title":"Get the ordered axis names from a OneSidedAstNode, removing all nesting. — get_ordered_axis_names","text":"Get ordered axis names OneSidedAstNode, removing nesting.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ordered_axis_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ordered axis names from a OneSidedAstNode, removing all nesting. — get_ordered_axis_names","text":"","code":"get_ordered_axis_names(ast, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/get_ordered_axis_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ordered axis names from a OneSidedAstNode, removing all nesting. — get_ordered_axis_names","text":"ast OneSidedAstNode object ... additional arguments (used)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ordered_axis_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ordered axis names from a OneSidedAstNode, removing all nesting. — get_ordered_axis_names","text":"list() axis names","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ungrouped_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"get flat list of all AstNodes in order, including children of GroupAstNodes. — get_ungrouped_nodes","title":"get flat list of all AstNodes in order, including children of GroupAstNodes. — get_ungrouped_nodes","text":"get flat list AstNodes order, including children GroupAstNodes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ungrouped_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get flat list of all AstNodes in order, including children of GroupAstNodes. — get_ungrouped_nodes","text":"","code":"get_ungrouped_nodes(ast, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/get_ungrouped_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get flat list of all AstNodes in order, including children of GroupAstNodes. — get_ungrouped_nodes","text":"ast AstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/get_ungrouped_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get flat list of all AstNodes in order, including children of GroupAstNodes. — get_ungrouped_nodes","text":"flat list AstNodes","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"image_tensor class provides convenient way work image data tensor format. extends base array class provides methods conversion /various image formats, plotting, printing. image_tensor object represents image data format \"h w c\" (height, width, channels) single images, \"b h w c\" (batch, height, width, channels) batches images, common format deep learning frameworks. also can 2D array, case treated black white image shown . main utility wrapping image data image_tensor class printing object automatically display image plot, long imager package installed. Otherwise simply print dimension image.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"","code":"as_image_tensor(x)  image_tensor(x)  # Default S3 method as_image_tensor(x)  # S3 method for class 'cimg' as_image_tensor(x)  # S3 method for class 'image_tensor' as.cimg(x)  # S3 method for class 'image_tensor' x[...]  # S3 method for class 'image_tensor' plot(x, ...)  # S3 method for class 'image_tensor' print(x, as_image = getOption(\"print_image_tensor_as_plot\", TRUE), ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"x object convert image_tensor format. ... Additional arguments passed underlying methods. [ indexing arguments. as_image Logical. Whether print image plot. Default controlled option print_image_tensor_as_plot (default: TRUE).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"as_image_tensor(): object class image_tensor .cimg(): cimg object (imager package) [.image_tensor(): subset image_tensor object. 4D arrays single index, returns 3D slice without batch dimension. plot(): Invisibly returns input object print(): Invisibly returns input object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"image_tensor class provides following methods (): as_image_tensor(): Generic function convert objects image_tensor format. Takes array-like objects 2-4 dimensions. 2 dimensional objects, convert 3D repeating data across 3 channels, essentially converting grayscale images RGB. as_image_tensor.default(): Default method converts arrays image_tensor as_image_tensor.cimg(): Method convert cimg objects (imager package) image_tensor .cimg.image_tensor(): Method convert image_tensor objects back cimg format [.image_tensor(): Subset method image_tensor objects plot.image_tensor(): Plot method image_tensor objects print.image_tensor(): Print method image_tensor objects","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"image_tensor object array dimensions \"h w c\" format single images, \"b h w c\" format batches images: h: height dimension (image height pixels) w: width dimension (image width pixels) c: channel dimension (RGB, 3D & 4D arrays) b: batch dimension (number images, 4D arrays)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"following options control behavior image_tensor methods: plot_image_tensor_axes: Whether show axes plots (default: FALSE) print_image_tensor_as_plot: Whether print images plots (default: TRUE)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/image_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Tensor: A thin wrapper around 2-4D arrays — image_tensor","text":"","code":"# create from a matrix (grayscale) img <- image_tensor(matrix(1:9, 3, 3)) print(img) print(img[1:2, 1:2])  # create from a 3D array (RGB image) img_rgb <- as_image_tensor(array(runif(27), dim = c(3, 3, 3))) print(img_rgb)"},{"path":"https://qile0317.github.io/einops/dev/reference/lex.html","id":null,"dir":"Reference","previous_headings":"","what":"Lexically analyze einops pattern into structured tokens — lex","title":"Lexically analyze einops pattern into structured tokens — lex","text":"Lexically analyze einops pattern structured tokens","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/lex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lexically analyze einops pattern into structured tokens — lex","text":"","code":"lex(pattern)"},{"path":"https://qile0317.github.io/einops/dev/reference/lex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lexically analyze einops pattern into structured tokens — lex","text":"pattern character string einops pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/lex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lexically analyze einops pattern into structured tokens — lex","text":"list token objects type, value, start, end fields","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_axes_iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a sequence of axis tokens — parse_axes_iter","title":"Parse a sequence of axis tokens — parse_axes_iter","text":"Parse sequence axis tokens","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_axes_iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a sequence of axis tokens — parse_axes_iter","text":"","code":"parse_axes_iter(tokens)"},{"path":"https://qile0317.github.io/einops/dev/reference/parse_axes_iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a sequence of axis tokens — parse_axes_iter","text":"tokens List tokens representing one side pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_axes_iter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a sequence of axis tokens — parse_axes_iter","text":"List AST nodes","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_einops_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse einops pattern into AST — parse_einops_ast","title":"Parse einops pattern into AST — parse_einops_ast","text":"python implementation, preprocess 1's () parse equivalent GroupAstNode. , ","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_einops_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse einops pattern into AST — parse_einops_ast","text":"","code":"parse_einops_ast(tokens)"},{"path":"https://qile0317.github.io/einops/dev/reference/parse_einops_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse einops pattern into AST — parse_einops_ast","text":"tokens EinopsTokenSequence object lexer","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_einops_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse einops pattern into AST — parse_einops_ast","text":"EinopsAst object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_onesided_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a one-sided einops pattern into OneSidedAstNode — parse_onesided_ast","title":"Parse a one-sided einops pattern into OneSidedAstNode — parse_onesided_ast","text":"Parse one-sided einops pattern OneSidedAstNode","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_onesided_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a one-sided einops pattern into OneSidedAstNode — parse_onesided_ast","text":"","code":"parse_onesided_ast(tokens)"},{"path":"https://qile0317.github.io/einops/dev/reference/parse_onesided_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a one-sided einops pattern into OneSidedAstNode — parse_onesided_ast","text":"tokens EinopsTokenSequence object lexer (arrow expected)","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_onesided_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a one-sided einops pattern into OneSidedAstNode — parse_onesided_ast","text":"OneSidedAstNode object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","title":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","text":"Use underscore skip dimension parsing.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","text":"","code":"parse_shape(x, expr, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/parse_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","text":"x tensor supported framework expr character length 1, space separated names axes, underscore means skip axis ... additional arguments passed methods","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","text":"named list, maps axes names lengths","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/parse_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a tensor shape to dictionary mapping axes names to their lengths. — parse_shape","text":"","code":"if (requireNamespace(\"abind\", quietly = TRUE)) {  # Use underscore to skip the dimension in parsing. x <- array(0, dim = c(2, 3, 5, 7)) parse_shape(x, 'batch _ h w')  # `parse_shape` output can be used to specify axes_lengths for other # operations: y <- array(0, dim = 700) shape_info <- parse_shape(x, 'b _ h w') # rearrange(y, '(b c h w) -> b c h w', shape_info) would give shape # (2, 10, 5, 7)  }"},{"path":"https://qile0317.github.io/einops/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://qile0317.github.io/einops/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/pprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Print — pprint","title":"Pretty Print — pprint","text":"convenience function prints repr() object. similar python's pprint.pprint(). Usually, ensure object displayed terminal using pprint format, just define print.that_object_class method calls pprint().","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/pprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Print — pprint","text":"","code":"pprint(x, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/pprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Print — pprint","text":"x Object pretty print ... Additional arguments passed repr()","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/pprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Print — pprint","text":"input object, invisibly","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/prepare_transformation_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the Transformation Recipe for an einops call — prepare_transformation_recipe","title":"Create the Transformation Recipe for an einops call — prepare_transformation_recipe","text":"function following parts einops 'compilation' pipeline: Lexing: tokenizing input expression string Parsing: converting tokens Abstract Syntax Tree (AST) Syntactic Analysis: operation-based AST validation pass Compile syntactic info intermediate representation (IR). IR generation: return TransformRecipe() object.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/prepare_transformation_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the Transformation Recipe for an einops call — prepare_transformation_recipe","text":"","code":"prepare_transformation_recipe(   expr,   func,   axes_names,   ndim,   reverse_groups = FALSE )"},{"path":"https://qile0317.github.io/einops/dev/reference/prepare_transformation_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the Transformation Recipe for an einops call — prepare_transformation_recipe","text":"expr input einops expression string func string/function indicating reduction operation axes_names user defined axis names character() vector. ndim count number dimensions input tensor reverse_groups logical: whether reverse order axes group.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/prepare_transformation_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the Transformation Recipe for an einops call — prepare_transformation_recipe","text":"populated TransformRecipe() object","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"operation includes functionality transpose (axes permutation), reshape (view), squeeze, unsqueeze, stack, concatenate operations.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"","code":"rearrange(x, expr, ..., .row_major = getOption(\"einops_row_major\", FALSE))  einops.rearrange(   x,   expr,   ...,   .row_major = getOption(\"einops_row_major\", FALSE) )"},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"x tensor: array, matrix, list arrays shape type expr string: reduction pattern ... either corresponding axes lengths single list . .row_major logical: whether use row-major order output tensor. TRUE, operation performed row-major order, output whatever order parent framework uses (e.g. column-major base::array()).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"tensor type input, dimensions according output pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"composing axes, C-order enumeration used (consecutive elements different last axis). Find examples vignettes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/rearrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reader-friendly smart element reordering for multidimensional tensors. — rearrange","text":"","code":"if (requireNamespace(\"abind\", quietly = TRUE)) {  # suppose we have a set of 32 images in \"h w c\" format (height-width-channel) images <- lapply(1:32, function(i) {     as_image_tensor(array(rnorm(30*40*3), dim = c(30, 40, 3))) })  # stacked and reordered axes to \"b c h w\" format y <- rearrange(images, 'b h w c -> b c h w')  # concatenate images along height (vertical axis), 960 = 32 * 30 y <- rearrange(images, 'b h w c -> (b h) w c')  # concatenated images along horizontal axis, 1280 = 32 * 40 y <- rearrange(images, 'b h w c -> h (b w) c')  # flattened each image into a vector, 3600 = 30 * 40 * 3 y <- rearrange(images, 'b h w c -> b (c h w)')  # split each image into 4 smaller quadrants, 128 = 32 * 2 * 2 y <- rearrange(     images, 'b (h1 h) (w1 w) c -> (b h1 w1) h w c', h1 = 2, w1 = 2 )  # space-to-depth operation y <- rearrange(     images, 'b (h h1) (w w1) c -> b h w (c h1 w1)', h1 = 2, w1 = 2 )  }"},{"path":"https://qile0317.github.io/einops/dev/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrangement and reduction in one step — reduce","title":"Rearrangement and reduction in one step — reduce","text":"reduce() combines rearrangement reduction using reader-friendly notation.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrangement and reduction in one step — reduce","text":"","code":"reduce(x, expr, func, ..., .row_major = getOption(\"einops_row_major\", FALSE))  einops.reduce(   x,   expr,   func,   ...,   .row_major = getOption(\"einops_row_major\", FALSE) )"},{"path":"https://qile0317.github.io/einops/dev/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrangement and reduction in one step — reduce","text":"x tensor: array, matrix, list arrays shape type expr string: reduction pattern func string function: one available reductions ('min', 'max', 'sum', 'mean', 'prod', '', ''), R 2 argument function takes two arguments, first tensor, second integer array indicating dimensions reduce . ... either corresponding axes lengths single list . .row_major logical: whether use row-major order output tensor. TRUE, operation performed row-major order, output whatever order parent framework uses (e.g. column-major base::array()).","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrangement and reduction in one step — reduce","text":"tensor type input, dimensions according output pattern","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rearrangement and reduction in one step — reduce","text":"","code":"if (requireNamespace(\"abind\", quietly = TRUE)) {  set.seed(42) # Suppose x is a 3D array: 100 x 32 x 64 x <- array(rnorm(100 * 32 * 64), dim = c(100, 32, 64))  # perform max-reduction on the first axis # Axis t does not appear on RHS - thus we reduced over t y <- reduce(x, 't b c -> b c', 'max')  # same as previous, but using verbose names for axes y <- reduce(x, 'time batch channel -> batch channel', 'max')  # let's pretend now that x is a batch of images # with 4 dims: batch=10height = 20width = 30channel = 40 x <- array(rnorm(10 * 20 * 30 * 40), dim = c(10, 20, 30, 40))  # 2d max-pooling with kernel size = 2 * 2 for image processing y1 <- reduce(x, 'b c (h1 h2) (w1 w2) -> b c h1 w1', 'max', h2 = 2, w2 = 2) as_image_tensor(y1)  # same as previous, using anonymous axes, # note: only reduced axes can be anonymous y1 <- reduce(x, 'b c (h1 2) (w1 2) -> b c h1 w1', 'max') as_image_tensor(y1)  # adaptive 2d max-pooling to 3 * 4 grid, # each element is max of 10x10 tile in the original tensor. dim(reduce(x, 'b c (h1 h2) (w1 w2) -> b c h1 w1', 'max', h1 = 3, w1 = 4)) # (10, 20, 3, 4)  # Global average pooling dim(reduce(x, 'b c h w -> b c', 'mean')) # (10, 20)  } #> [1] 10 20"},{"path":"https://qile0317.github.io/einops/dev/reference/register_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a new backend for a tensor type — register_backend","title":"Register a new backend for a tensor type — register_backend","text":"Registers backend implementation specific tensor type, along required dependencies, testing flag, optional aliases. function wraps backend class thunk() registers backend registry.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/register_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a new backend for a tensor type — register_backend","text":"","code":"register_backend(   tensor_type,   backend_class,   dependencies = character(0),   testing = FALSE,   aliases = character(0) )"},{"path":"https://qile0317.github.io/einops/dev/reference/register_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a new backend for a tensor type — register_backend","text":"tensor_type string specifying tensor type backend supports. backend_class R6Class generator backend (subclass EinopsBackend). Note binding necessarily defined value time calling function. dependencies Optional character vector required package names. testing TRUE, indicates used testing. aliases Optional character vector aliases tensor type.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/register_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a new backend for a tensor type — register_backend","text":"Invisibly returns backend registry object.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/repr.html","id":null,"dir":"Reference","previous_headings":"","what":"Python-like Representation of Objects as Strings — repr","title":"Python-like Representation of Objects as Strings — repr","text":"R implementation python's repr() function. objects default repr uses print method. important pprint() function always able give repr-esque output object.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/repr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python-like Representation of Objects as Strings — repr","text":"","code":"repr(x, indent = 0L, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/repr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python-like Representation of Objects as Strings — repr","text":"x Object represent indent Indentation level (number spaces) ... Additional arguments passed methods","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/repr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python-like Representation of Objects as Strings — repr","text":"character vector class c(\"repr_output\", \"character\"), element line","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/tail.GroupAstNode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the last n children of a GroupAstNode as a list of AstNodes. — tail.GroupAstNode","title":"Get the last n children of a GroupAstNode as a list of AstNodes. — tail.GroupAstNode","text":"Get last n children GroupAstNode list AstNodes.","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/tail.GroupAstNode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the last n children of a GroupAstNode as a list of AstNodes. — tail.GroupAstNode","text":"","code":"# S3 method for class 'GroupAstNode' tail(x, n = 1, ...)"},{"path":"https://qile0317.github.io/einops/dev/reference/thunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple thunk: wraps an input in a no-argument function — thunk","title":"Simple thunk: wraps an input in a no-argument function — thunk","text":"Simple thunk: wraps input -argument function","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/thunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple thunk: wraps an input in a no-argument function — thunk","text":"","code":"thunk(input)"},{"path":"https://qile0317.github.io/einops/dev/reference/thunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple thunk: wraps an input in a no-argument function — thunk","text":"input R object expression","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/thunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple thunk: wraps an input in a no-argument function — thunk","text":"thunk returns object called class c(\"thunk\", \"function\")","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/validate_reduction_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactically Validate the reduction operation in the einops expression — validate_reduction_operation","title":"Syntactically Validate the reduction operation in the einops expression — validate_reduction_operation","text":"Syntactically Validate reduction operation einops expression","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/validate_reduction_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactically Validate the reduction operation in the einops expression — validate_reduction_operation","text":"","code":"validate_reduction_operation(einops_ast, operation)"},{"path":"https://qile0317.github.io/einops/dev/reference/validate_reduction_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactically Validate the reduction operation in the einops expression — validate_reduction_operation","text":"einops_ast parsed Abstract Syntax Tree (AST) einops expression operation reduction operation, either string function","code":""},{"path":"https://qile0317.github.io/einops/dev/reference/validate_reduction_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactically Validate the reduction operation in the einops expression — validate_reduction_operation","text":"input einops_ast (invisibly) validation passes","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/news/index.html","id":"additions-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"Additions","title":"einops 0.1.0.9000 (development version)","text":"zeallot now suggested dependency users lintr now suggested dependency developers","code":""},{"path":[]},{"path":"https://qile0317.github.io/einops/dev/news/index.html","id":"einops-010","dir":"Changelog","previous_headings":"","what":"einops 0.1.0","title":"einops 0.1.0","text":"Initial release. python einops function implementations rearrange, reduce, repeat, parse_shape, backend supported base::array objects. first einops tutorial also mostly re-implemented vignette","code":""}]
